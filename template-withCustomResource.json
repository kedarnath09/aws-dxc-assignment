{
   "AWSTemplateFormatVersion": "2010-09-09",
   "Resources": {
      "ExampleLambdaRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Statement": [{
                  "Effect": "Allow",
                  "Principal": {
                     "Service": ["lambda.amazonaws.com"]
                  },
                  "Action": ["sts:AssumeRole"]
               }]
            },
            "Path": "/",
			"Policies": [{
			"PolicyName": "CloudWatchLogs",
			"PolicyDocument": {
			"Version": "2012-10-17",
            "Statement": [{ "Effect": "Allow", "Action": ["logs:*"], "Resource": "arn:aws:logs:*:*:*" }]
			}
			},
			{
				"PolicyName": "S3Access",
				"PolicyDocument": {
				"Version": "2012-10-17",
				"Statement": [{ "Effect": "Allow", "Action": ["s3:*"], "Resource": ["arn:aws:s3:::sys-manager-params","arn:aws:s3:::sys-manager-params/*"]
				}]
			  }
			},
			{
				"PolicyName": "ssmReadAccess",
				"PolicyDocument": {
				"Version": "2012-10-17",
				"Statement": [{ "Effect": "Allow", 
				"Action":  ["ssm:Describe*", "ssm:Get*", "ssm:List*"], "Resource":"*"}]
			  }
			},
			{
				"PolicyName": "xRayAccess",
				"PolicyDocument": {
				"Version": "2012-10-17",
				"Statement": [{ "Effect": "Allow", 
				"Action":  "xray:*", "Resource":"*"}]
			  }
			}			
			]
			}
		  },
	  
	  
	  "ExampleLambda": {
            "Type": "AWS::Lambda::Function",
			
            "Properties": {
			"Handler": "index.lambda_handler",
              "Code": { 
			  
				"ZipFile":  { "Fn::Join": ["", [
						"import json\n",
						"import boto3\n",						
						"import cfnresponse\n",
						"def lambda_handler(event, context):\n\t",
						"try:\n\t\t",
						"print(event,context)\n\t\t",
						"s3_bucket = 'sys-manager-params' \n\t\t" ,
						"ssm_userName = 'UserName'\n\t\t",
						"# TODO: write code...\n\t\t",
						"# Create boto3 client object for ssm\n\t\t",
						"ssm_client = boto3.client('ssm')\n\t\t",					
						"# Retrieve UserName details\n\t\t",
						"response = ssm_client.get_parameter(Name=ssm_userName, WithDecryption=False)\n\t\t",
						"user = {}\n\t\t",
						"user[response['Parameter']['Name']] = response['Parameter']['Value']\n\t\t",
						"# Create boto3 client object for s3\n\t\t",
						"s3_client = boto3.client('s3')\n\t\t",		
						"# Updating the user details in the bucket\n\t\t",
						"s3_client.put_object(Bucket=s3_bucket, Key='sample.json', Body=json.dumps(user))\n\t\t",
						"print('{} updated details in s3'.format(ssm_userName))\n\t\t",						
						"if event['RequestType'] == 'Delete':\n\t\t\t",
						"cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n\t\t",
						"if event['RequestType'] == 'Update':\n\t\t\t",
						"cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n\t\t",
						"if event['RequestType'] == 'Create':\n\t\t\t",
						"cfnresponse.send(event, context, cfnresponse.SUCCESS, 'UserName Updated in S3')\n\t\t",
						"return {\n\t\t",
						"'statusCode': 200,\n\t\t",
						"'body': 'example-lambda execution completed, {} details updated in S3'.format(ssm_userName)\n\t\t",
						"}\n\t",
						"except Exception as e: \n\t\t",
						"print('Error',str(e))\n\t\t"
					]]}
               },

              "Description": "This function will read the username from ssm and write to s3",

              "FunctionName" : "example-lambda2",           

              "MemorySize": 256,              
				
			   "Role": { "Fn::GetAtt" : ["ExampleLambdaRole", "Arn"] },

              "Timeout": 300,

              "Runtime": "python3.7",
			
			  "TracingConfig": {
					"Mode": "Active"
				}
            }

        },
		"MyCustomResource" : {
		"Type" : "Custom::TestLambdaCrossStackRef",
		"Properties" : {
			"ServiceToken": { "Fn::Join": [ "", [ "arn:aws:lambda:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":function:", {"Ref" : "ExampleLambda"} ] ] }
			}
		}
},
 "Outputs": {   

        "ExampleLambdaOutput": {
            "Value": { "Ref" : "ExampleLambda" }
        },
		"MyCustomResource":{
			"Value": {"Ref":"MyCustomResource"}
			}
		
        }

}
